/*
    class  : TagAndProbeProducer
    author : Luca Cadamuro (LLR)
    date   : 05 June 2016
    brief  : produces the tag and the probe selected for the event (empty if not passing T&P selections)
*/

#include <FWCore/Framework/interface/Frameworkfwd.h>
#include <FWCore/Framework/interface/EDProducer.h>
#include <FWCore/Framework/interface/Event.h>
#include <FWCore/Framework/interface/ESHandle.h>
#include <FWCore/MessageLogger/interface/MessageLogger.h>
#include <FWCore/ParameterSet/interface/ParameterSet.h>
#include <FWCore/Utilities/interface/InputTag.h>

using namespace edm;
using namespace std;
using namespace reco;

class TagAndProbeProducer : public edm::EDProducer {
    public:
        // Constructor
        explicit TagAndProbeProducer(const edm::ParameterSet&);
        // Destructor
        ~TagAndProbeProducer();  

    private:
        virtual void beginJob(){};  
        virtual void produce(edm::Event&, const edm::EventSetup&);
        virtual void endJob(){};

        EDGetTokenT<TauRefVector>   _tausTag;
        EDGetTokenT<MuonRefVector>  _muonsTag;
        // EDGetTokenT<MuonRefVector>  _metTag;

};

TagAndProbeProducer::TagAndProbeProducer(const edm::ParameterSet& iConfig) :
_tausTag(consumes<pat::TauRefVector> (iConfig.getParameter<InputTag>("taus"))),
_muonsTag(consumes<pat::TauRefVector>(iConfig.getParameter<InputTag>("muons")))
// _metTag(consumes<pat::TauRefVector>(iConfig.getParameter<InputTag>("met"))),
{}

TagAndProbeProXXXXducer::~TagAndProbeProducer()
{}

TagAndProbeProducer::produce(edm::Event& iEvent, const edm::EventSetup& iSetup)
{
    // select the tag
}

DEFINE_FWK_MODULE(TagAndProbeProducer);